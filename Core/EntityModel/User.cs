//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Core.EntityModel
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;


    /// <summary>
    /// The User entity model
    /// </summary>
    public partial class User
    {
        public User()
        {
            this.Comments = new HashSet<Comment>();
            this.MessageTitlesFrom = new HashSet<MessageTitle>();
            this.MessageTitlesTo = new HashSet<MessageTitle>();
            this.PrivateMessages = new HashSet<PrivateMessage>();
        }


        /// <summary>
        /// Gets or sets the user identifier.
        /// </summary>
        /// <value>
        /// The user identifier.
        /// </value>
        public int UserID { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>
        /// The user name.
        /// </value>
        [Required(ErrorMessage = "Enter Name!", AllowEmptyStrings = false)]
        [RegularExpression(@"([A-Z]){1}([A-Za-z]){2,}", ErrorMessage = "invalid name, or short Name. Try somethink like: Air, Yoruichi, Byakuya")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the login.
        /// </summary>
        /// <value>
        /// The user login.
        /// </value>
        [Required(ErrorMessage = "Enter Login!", AllowEmptyStrings = false)]
        [RegularExpression(@"([A-Z0-9]){1}([A-Za-z0-9]){2,}", ErrorMessage = "Invalid Login, or short Login.")]
        public string Login { get; set; }

        /// <summary>
        /// Gets or sets the password.
        /// </summary>
        /// <value>
        /// The user password.
        /// </value>
        [Required(ErrorMessage = "Set password!", AllowEmptyStrings = false)]
        [DataType(DataType.Password)]
        [StringLength(14, MinimumLength = 8, ErrorMessage = "The password should be at least 8 characters and no more than 14")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the confirm password.
        /// </summary>
        /// <value>
        /// The confirm password.
        /// </value>
        [Compare("Password", ErrorMessage = "Passwords don't match")]
        [DataType(DataType.Password)]
        public string ConfirmPassword { get; set; }

        /// <summary>
        /// Gets or sets the downloads count.
        /// </summary>
        /// <value>
        /// The downloads count of user.
        /// </value>
        public int DownloadsCount { get; set; }

        /// <summary>
        /// Gets or sets the email.
        /// </summary>
        /// <value>
        /// The user email.
        /// </value>
        [Required(ErrorMessage = "Enter Email", AllowEmptyStrings = false)]
        [RegularExpression(@"([A-Za-z0-9])+@([a-z])+\.(ua|net|com|ru)", ErrorMessage = "Invalid Email. Try something like: ichika@i.ua, fresha1r@outlook.com")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the registration date.
        /// </summary>
        /// <value>
        /// The registration date of user.
        /// </value>
        public System.DateTime RegistrationDate { get; set; }

        /// <summary>
        /// Gets or sets the role identifier.
        /// </summary>
        /// <value>
        /// The role identifier.
        /// </value>
        public int RoleID { get; set; }

        /// <summary>
        /// Gets or sets the image.
        /// </summary>
        /// <value>
        /// The user image/avatar.
        /// </value>
        public string Image { get; set; }
    
        public virtual Role Role { get; set; }
        public virtual ICollection<Comment> Comments { get; set; }
        public virtual ICollection<MessageTitle> MessageTitlesFrom { get; set; }
        public virtual ICollection<MessageTitle> MessageTitlesTo { get; set; }
        public virtual ICollection<PrivateMessage> PrivateMessages { get; set; }
    }
}
